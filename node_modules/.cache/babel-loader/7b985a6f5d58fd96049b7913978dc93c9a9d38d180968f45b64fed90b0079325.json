{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nnsou\\\\OneDrive\\\\Ambiente de Trabalho\\\\Code_for_All React\\\\reactor\\\\week3\\\\covid-visualizer2\\\\src\\\\WorldMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Circle } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  activeTab\n}) => {\n  _s();\n  const [map, setMap] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://disease.sh/v3/covid-19/countries');\n        const data = await response.json();\n        console.log('Received data in WorldMap:', data);\n        const processedData = data.map(country => ({\n          lat: country.countryInfo.lat,\n          long: country.countryInfo.long,\n          radius: activeTab === 'cases' ? country.cases : activeTab === 'recovered' ? country.recovered : country.deaths\n        }));\n        setMap(processedData);\n      } catch (error) {}\n    };\n    fetchData();\n  }, [activeTab]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [20, 0],\n    zoom: 2.5,\n    style: {\n      height: '100%',\n      width: '100%',\n      boxShadow: '0 0 10px rgba(200, 200, 200, 2'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), map.map((data, index) => /*#__PURE__*/_jsxDEV(Circle, {\n      center: [data.lat, data.long],\n      pathOptions: {\n        fillColor: 'blue',\n        color: 'blue'\n      },\n      radius: Math.sqrt(data.radius) * 100\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"YnpBc6JvwoT19Z6Lko1HvjIIqmk=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Circle","jsxDEV","_jsxDEV","WorldMap","activeTab","_s","map","setMap","fetchData","response","fetch","data","json","console","log","processedData","country","lat","countryInfo","long","radius","cases","recovered","deaths","error","center","zoom","style","height","width","boxShadow","children","url","fileName","_jsxFileName","lineNumber","columnNumber","index","pathOptions","fillColor","color","Math","sqrt","_c","$RefreshReg$"],"sources":["C:/Users/nnsou/OneDrive/Ambiente de Trabalho/Code_for_All React/reactor/week3/covid-visualizer2/src/WorldMap.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { MapContainer, TileLayer, Circle } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css'; \r\n\r\nconst WorldMap = ({ activeTab }) => {\r\n  const [map, setMap] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch ('https://disease.sh/v3/covid-19/countries');\r\n        const data = await response.json();\r\n\r\n        console.log('Received data in WorldMap:', data);\r\n\r\n        const processedData = data.map((country) => ({\r\n          lat: country.countryInfo.lat,\r\n          long: country.countryInfo.long,\r\n          radius: activeTab === 'cases' \r\n            ? country.cases \r\n            : activeTab === 'recovered' \r\n              ? country.recovered\r\n              : country.deaths,\r\n        }));\r\n        setMap(processedData);\r\n      } catch (error) {\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [activeTab]);\r\n\r\n  return (\r\n    <MapContainer center={[20, 0]} zoom={2.5} style={{ height: '100%', width: '100%', boxShadow: '0 0 10px rgba(200, 200, 200, 2' }}>\r\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n      {map.map((data, index) => (\r\n        <Circle\r\n        key={index}\r\n        center={[data.lat, data.long]}\r\n        pathOptions={{ fillColor: 'blue', color: 'blue'}}\r\n        radius={Math.sqrt(data.radius) *100}\r\n      />\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default WorldMap;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC/D,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAA0C,CAAC;QACzE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,IAAI,CAAC;QAE/C,MAAMI,aAAa,GAAGJ,IAAI,CAACL,GAAG,CAAEU,OAAO,KAAM;UAC3CC,GAAG,EAAED,OAAO,CAACE,WAAW,CAACD,GAAG;UAC5BE,IAAI,EAAEH,OAAO,CAACE,WAAW,CAACC,IAAI;UAC9BC,MAAM,EAAEhB,SAAS,KAAK,OAAO,GACzBY,OAAO,CAACK,KAAK,GACbjB,SAAS,KAAK,WAAW,GACvBY,OAAO,CAACM,SAAS,GACjBN,OAAO,CAACO;QAChB,CAAC,CAAC,CAAC;QACHhB,MAAM,CAACQ,aAAa,CAAC;MACvB,CAAC,CAAC,OAAOS,KAAK,EAAE,CAChB;IACF,CAAC;IAEDhB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,oBACEF,OAAA,CAACJ,YAAY;IAAC2B,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAE;IAACC,IAAI,EAAE,GAAI;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAiC,CAAE;IAAAC,QAAA,gBAC9H7B,OAAA,CAACH,SAAS;MAACiC,GAAG,EAAC;IAAoD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrE9B,GAAG,CAACA,GAAG,CAAC,CAACK,IAAI,EAAE0B,KAAK,kBACnBnC,OAAA,CAACF,MAAM;MAEPyB,MAAM,EAAE,CAACd,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACQ,IAAI,CAAE;MAC9BmB,WAAW,EAAE;QAAEC,SAAS,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAM,CAAE;MACjDpB,MAAM,EAAEqB,IAAI,CAACC,IAAI,CAAC/B,IAAI,CAACS,MAAM,CAAC,GAAE;IAAI,GAH/BiB,KAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB,CAAC;AAAC/B,EAAA,CAzCIF,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}