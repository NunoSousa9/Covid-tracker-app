{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nnsou\\\\OneDrive\\\\Ambiente de Trabalho\\\\Git\\\\Covid\\\\covid-visualizer2\\\\src\\\\Countries\\\\DoughnutChart.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { Chart } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoughnutChart = ({\n  cases,\n  recovered,\n  deaths,\n  height\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  let chartInstance = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    const recoveredValue = recovered || 0;\n    if (ctx) {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n      chartInstance.current = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: [\"Cases\", \"Recovered\", \"Deaths\"],\n          datasets: [{\n            label: \"COVID-19 Cases\",\n            data: [cases, recoveredValue, deaths],\n            backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          width: 500,\n          height: height || 500\n        }\n      });\n    }\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [cases, recovered, deaths]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(DoughnutChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = DoughnutChart;\nexport default DoughnutChart;\nvar _c;\n$RefreshReg$(_c, \"DoughnutChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","DoughnutChart","cases","recovered","deaths","height","_s","chartRef","chartInstance","ctx","current","getContext","recoveredValue","destroy","type","data","labels","datasets","label","backgroundColor","options","responsive","maintainAspectRatio","width","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nnsou/OneDrive/Ambiente de Trabalho/Git/Covid/covid-visualizer2/src/Countries/DoughnutChart.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\n\r\n\r\nconst DoughnutChart = ({cases, recovered, deaths, height}) => {\r\n    const chartRef = useRef(null);\r\n    let chartInstance = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const ctx = chartRef.current.getContext('2d');\r\n\r\n        const recoveredValue = recovered || 0;\r\n\r\n        if(ctx) {\r\n            if (chartInstance.current) {\r\n                chartInstance.current.destroy();\r\n            }\r\n        chartInstance.current = new Chart(ctx, {\r\n            type: \"doughnut\",\r\n            data: {\r\n                labels: [\"Cases\", \"Recovered\", \"Deaths\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"COVID-19 Cases\",\r\n                        data: [cases, recoveredValue, deaths],\r\n                        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false, \r\n                width: 500,\r\n                height: height || 500,\r\n            },\r\n        });\r\n\r\n    }\r\n\r\n        return () => {\r\n            if(chartInstance.current) {\r\n                chartInstance.current.destroy();\r\n            }\r\n        };\r\n    }, [cases, recovered, deaths]);\r\n\r\n    return (\r\n        <div> \r\n            <canvas ref= {chartRef}></canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DoughnutChart;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjC,MAAMC,aAAa,GAAGA,CAAC;EAACC,KAAK;EAAEC,SAAS;EAAEC,MAAM;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC7B,IAAIW,aAAa,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACZ,MAAMa,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAE7C,MAAMC,cAAc,GAAGT,SAAS,IAAI,CAAC;IAErC,IAAGM,GAAG,EAAE;MACJ,IAAID,aAAa,CAACE,OAAO,EAAE;QACvBF,aAAa,CAACE,OAAO,CAACG,OAAO,CAAC,CAAC;MACnC;MACJL,aAAa,CAACE,OAAO,GAAG,IAAIZ,KAAK,CAACW,GAAG,EAAE;QACnCK,IAAI,EAAE,UAAU;QAChBC,IAAI,EAAE;UACFC,MAAM,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC;UACxCC,QAAQ,EAAE,CACN;YACIC,KAAK,EAAE,gBAAgB;YACvBH,IAAI,EAAE,CAACb,KAAK,EAAEU,cAAc,EAAER,MAAM,CAAC;YACrCe,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS;UACrD,CAAC;QAET,CAAC;QACDC,OAAO,EAAE;UACLC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,KAAK,EAAE,GAAG;UACVlB,MAAM,EAAEA,MAAM,IAAI;QACtB;MACJ,CAAC,CAAC;IAEN;IAEI,OAAO,MAAM;MACT,IAAGG,aAAa,CAACE,OAAO,EAAE;QACtBF,aAAa,CAACE,OAAO,CAACG,OAAO,CAAC,CAAC;MACnC;IACJ,CAAC;EACL,CAAC,EAAE,CAACX,KAAK,EAAEC,SAAS,EAAEC,MAAM,CAAC,CAAC;EAE9B,oBACIJ,OAAA;IAAAwB,QAAA,eACIxB,OAAA;MAAQyB,GAAG,EAAGlB;IAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEd,CAAC;AAACvB,EAAA,CA/CIL,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}